// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/dollarshaveclub/acyl/lib (interfaces: PreemptableLock)

package mocks

import (
	gomock "github.com/golang/mock/gomock"
)

// Mock of PreemptableLock interface
type MockPreemptableLock struct {
	ctrl     *gomock.Controller
	recorder *_MockPreemptableLockRecorder
}

// Recorder for MockPreemptableLock (not exported)
type _MockPreemptableLockRecorder struct {
	mock *MockPreemptableLock
}

func NewMockPreemptableLock(ctrl *gomock.Controller) *MockPreemptableLock {
	mock := &MockPreemptableLock{ctrl: ctrl}
	mock.recorder = &_MockPreemptableLockRecorder{mock}
	return mock
}

func (_m *MockPreemptableLock) EXPECT() *_MockPreemptableLockRecorder {
	return _m.recorder
}

func (_m *MockPreemptableLock) Destroy() error {
	ret := _m.ctrl.Call(_m, "Destroy")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockPreemptableLockRecorder) Destroy() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Destroy")
}

func (_m *MockPreemptableLock) Lock(_param0 <-chan struct{}) (<-chan struct{}, error) {
	ret := _m.ctrl.Call(_m, "Lock", _param0)
	ret0, _ := ret[0].(<-chan struct{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockPreemptableLockRecorder) Lock(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Lock", arg0)
}

func (_m *MockPreemptableLock) Unlock() error {
	ret := _m.ctrl.Call(_m, "Unlock")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockPreemptableLockRecorder) Unlock() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Unlock")
}
