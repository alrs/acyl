// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/newrelic/go-agent (interfaces: Transaction)

package mocks

import (
	http "net/http"

	gomock "github.com/golang/mock/gomock"
	go_agent "github.com/newrelic/go-agent"
)

// Mock of Transaction interface
type MockTransaction struct {
	ctrl     *gomock.Controller
	recorder *_MockTransactionRecorder
}

// Recorder for MockTransaction (not exported)
type _MockTransactionRecorder struct {
	mock *MockTransaction
}

func NewMockTransaction(ctrl *gomock.Controller) *MockTransaction {
	mock := &MockTransaction{ctrl: ctrl}
	mock.recorder = &_MockTransactionRecorder{mock}
	return mock
}

func (_m *MockTransaction) EXPECT() *_MockTransactionRecorder {
	return _m.recorder
}

func (_m *MockTransaction) AddAttribute(_param0 string, _param1 interface{}) error {
	ret := _m.ctrl.Call(_m, "AddAttribute", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockTransactionRecorder) AddAttribute(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddAttribute", arg0, arg1)
}

func (_m *MockTransaction) End() error {
	ret := _m.ctrl.Call(_m, "End")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockTransactionRecorder) End() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "End")
}

func (_m *MockTransaction) Header() http.Header {
	ret := _m.ctrl.Call(_m, "Header")
	ret0, _ := ret[0].(http.Header)
	return ret0
}

func (_mr *_MockTransactionRecorder) Header() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Header")
}

func (_m *MockTransaction) Ignore() error {
	ret := _m.ctrl.Call(_m, "Ignore")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockTransactionRecorder) Ignore() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Ignore")
}

func (_m *MockTransaction) NoticeError(_param0 error) error {
	ret := _m.ctrl.Call(_m, "NoticeError", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockTransactionRecorder) NoticeError(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NoticeError", arg0)
}

func (_m *MockTransaction) SetName(_param0 string) error {
	ret := _m.ctrl.Call(_m, "SetName", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockTransactionRecorder) SetName(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetName", arg0)
}

func (_m *MockTransaction) StartSegmentNow() go_agent.SegmentStartTime {
	ret := _m.ctrl.Call(_m, "StartSegmentNow")
	ret0, _ := ret[0].(go_agent.SegmentStartTime)
	return ret0
}

func (_mr *_MockTransactionRecorder) StartSegmentNow() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StartSegmentNow")
}

func (_m *MockTransaction) Write(_param0 []byte) (int, error) {
	ret := _m.ctrl.Call(_m, "Write", _param0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTransactionRecorder) Write(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Write", arg0)
}

func (_m *MockTransaction) WriteHeader(_param0 int) {
	_m.ctrl.Call(_m, "WriteHeader", _param0)
}

func (_mr *_MockTransactionRecorder) WriteHeader(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WriteHeader", arg0)
}
