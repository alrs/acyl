// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/newrelic/go-agent (interfaces: Application)

package mocks

import (
	http "net/http"
	time "time"

	gomock "github.com/golang/mock/gomock"
	go_agent "github.com/newrelic/go-agent"
)

// Mock of Application interface
type MockApplication struct {
	ctrl     *gomock.Controller
	recorder *_MockApplicationRecorder
}

// Recorder for MockApplication (not exported)
type _MockApplicationRecorder struct {
	mock *MockApplication
}

func NewMockApplication(ctrl *gomock.Controller) *MockApplication {
	mock := &MockApplication{ctrl: ctrl}
	mock.recorder = &_MockApplicationRecorder{mock}
	return mock
}

func (_m *MockApplication) EXPECT() *_MockApplicationRecorder {
	return _m.recorder
}

func (_m *MockApplication) RecordCustomEvent(_param0 string, _param1 map[string]interface{}) error {
	ret := _m.ctrl.Call(_m, "RecordCustomEvent", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockApplicationRecorder) RecordCustomEvent(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RecordCustomEvent", arg0, arg1)
}

func (_m *MockApplication) Shutdown(_param0 time.Duration) {
	_m.ctrl.Call(_m, "Shutdown", _param0)
}

func (_mr *_MockApplicationRecorder) Shutdown(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Shutdown", arg0)
}

func (_m *MockApplication) StartTransaction(_param0 string, _param1 http.ResponseWriter, _param2 *http.Request) go_agent.Transaction {
	ret := _m.ctrl.Call(_m, "StartTransaction", _param0, _param1, _param2)
	ret0, _ := ret[0].(go_agent.Transaction)
	return ret0
}

func (_mr *_MockApplicationRecorder) StartTransaction(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StartTransaction", arg0, arg1, arg2)
}

func (_m *MockApplication) WaitForConnection(_param0 time.Duration) error {
	ret := _m.ctrl.Call(_m, "WaitForConnection", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockApplicationRecorder) WaitForConnection(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WaitForConnection", arg0)
}
